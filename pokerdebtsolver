<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Poker Debt Solver</title>
    <!-- Importing the Vegas-style font 'Lobster' from Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Lobster', cursive; /* Vegas-style font */
            padding: 20px;
            margin: 0;
            background-color: black; /* Changed to black background */
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            color: white; /* Changed text color to white for better readability */
        }
        .container {
            background-color: #333; /* Darker container for contrast */
            padding: 40px;
            border-radius: 8px;
            border: 2px solid #fff; /* White border for better visibility */
            width: 100%;
            max-width: 600px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: white; /* Ensuring label is visible */
        }
        input, button {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            border: 2px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 16px;
            background-color: #555; /* Darker input backgrounds for visibility */
            color: white; /* Input text color */
        }
        button {
            background-color: #007BFF;
            color: white;
            border: none;
            margin-top: 20px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #0056b3;
        }
        #results, #netResults {
            margin-top: 20px;
            padding: 20px;
            background-color: #444; /* Dark background for results */
            border-radius: 4px;
            color: white; /* Results text color */
        }
        h1 {
            text-align: center;
        }
        .flex-container {
            display: flex;
            justify-content: space-between;
        }
        .flex-container > div {
            flex: 1;
        }
        .error-message {
            color: red;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Poker Debt Solver</h1>
        <form id="pokerForm">
            <div class="flex-container">
                <div>
                    <label for="startAmount">Starting Amount:</label>
                    <input type="number" id="startAmount" required>
                </div>
                <div>
                    <label for="bigBlind">Big Blind:</label>
                    <input type="number" id="bigBlind" required>
                </div>
                <div>
                    <label for="littleBlind">Little Blind:</label>
                    <input type="number" id="littleBlind" required>
                </div>
            </div>
            <div>
                <label for="names">Names (comma-separated):</label>
                <input type="text" id="names" required>
            </div>
            <div>
                <label for="balances">End Balances (comma-separated):</label>
                <input type="text" id="balances" required>
            </div>
            <button type="button" onclick="processData()">Calculate Debts</button>
        </form>
        <div id="errorContainer" class="error-message"></div>
        <div id="netResults"></div>
        <div id="results"></div>
    </div>
    <script>
       function settleDebts(startAmount, names, balances) {
            const netChanges = names.map((name, index) => ({ name: name, amount: balances[index] - startAmount }));
            let debtors = netChanges.filter(item => item.amount < 0);
            let creditors = netChanges.filter(item => item.amount > 0);

            const transactions = [];
            const netResults = netChanges.map(item => `${item.name}: Net ${item.amount >= 0 ? 'Gain' : 'Loss'}: $${item.amount.toFixed(2)}`);
            
            while (debtors.length > 0 && creditors.length > 0) {
                const debtor = debtors[0];
                const creditor = creditors[0];
                
                const payment = Math.min(-debtor.amount, creditor.amount);
                transactions.push(`${debtor.name} -> ${creditor.name}: $${payment.toFixed(2)}`);
                
                debtor.amount += payment;
                creditor.amount -= payment;
                
                if (debtor.amount >= -0.01) {
                    debtors.shift();
                }
                if (creditor.amount <= 0.01) {
                    creditors.shift();
                }
            }

            return { transactions, netResults };
        }

        function processData() {
            const startAmountInput = document.getElementById('startAmount').value;
            const startAmount = parseFloat(startAmountInput);
            const namesInput = document.getElementById('names').value.split(',').map(name => name.trim());
            const balancesInput = document.getElementById('balances').value.split(',').map(balance => parseFloat(balance.trim()));

            if (!validateTotals(startAmount * namesInput.length, balancesInput)) {
                document.getElementById('errorContainer').innerText = 'Error: The total of end balances does not match the expected total based on the starting amount.';
                document.getElementById('netResults').innerHTML = '';
                document.getElementById('results').innerHTML = '';
                return;
            } else {
                document.getElementById('errorContainer').innerText = '';
            }

            const results = settleDebts(startAmount, namesInput, balancesInput);
            const netResultsContainer = document.getElementById('netResults');
            const resultsContainer = document.getElementById('results');
            netResultsContainer.innerHTML = '<h2>Net Results:</h2>' + results.netResults.join('<br>');
            resultsContainer.innerHTML = '<h2>Transactions:</h2>' + results.transactions.join('<br>');
        }

        function validateTotals(expectedTotal, endBalances) {
            const totalEndBalance = endBalances.reduce((acc, cur) => acc + cur, 0);
            // Allow for some floating point error
            return Math.abs(totalEndBalance - expectedTotal) < 0.01;
        }

    </script>
</body>
</html>
